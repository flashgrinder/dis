(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/* eslint-disable no-param-reassign */

/* eslint-disable no-underscore-dangle */
var HystModal = /*#__PURE__*/function () {
  function HystModal(props) {
    _classCallCheck(this, HystModal);

    var defaultConfig = {
      backscroll: true,
      linkAttributeName: 'data-hystmodal',
      closeOnOverlay: true,
      closeOnEsc: true,
      closeOnButton: true,
      waitTransitions: false,
      catchFocus: true,
      fixedSelectors: '*[data-hystfixed]',
      beforeOpen: function beforeOpen() {},
      afterClose: function afterClose() {}
    };
    this.config = Object.assign(defaultConfig, props);

    if (this.config.linkAttributeName) {
      this.init();
    }

    this._closeAfterTransition = this._closeAfterTransition.bind(this);
  }

  _createClass(HystModal, [{
    key: "init",
    value: function init() {
      this.isOpened = false;
      this.openedWindow = false;
      this.starter = false;
      this._nextWindows = false;
      this._scrollPosition = 0;
      this._reopenTrigger = false;
      this._overlayChecker = false;
      this._isMoved = false;
      this._focusElements = ['a[href]', 'area[href]', 'input:not([disabled]):not([type="hidden"]):not([aria-hidden])', 'select:not([disabled]):not([aria-hidden])', 'textarea:not([disabled]):not([aria-hidden])', 'button:not([disabled]):not([aria-hidden])', 'iframe', 'object', 'embed', '[contenteditable]', '[tabindex]:not([tabindex^="-"])'];
      this._modalBlock = false;
      var existingShadow = document.querySelector('.hystmodal__shadow');

      if (existingShadow) {
        this.shadow = existingShadow;
      } else {
        this.shadow = document.createElement('div');
        this.shadow.classList.add('hystmodal__shadow');
        document.body.appendChild(this.shadow);
      }

      this.eventsFeeler();
    }
  }, {
    key: "eventsFeeler",
    value: function eventsFeeler() {
      var _this = this;

      document.addEventListener('click', function (e) {
        var clickedlink = e.target.closest("[".concat(_this.config.linkAttributeName, "]"));

        if (!_this._isMoved && clickedlink) {
          e.preventDefault();
          _this.starter = clickedlink;

          var targetSelector = _this.starter.getAttribute(_this.config.linkAttributeName);

          _this._nextWindows = document.querySelector(targetSelector);

          _this.open();

          return;
        }

        if (_this.config.closeOnButton && e.target.closest('[data-hystclose]')) {
          _this.close();
        }
      });

      if (this.config.closeOnOverlay) {
        document.addEventListener('mousedown', function (e) {
          if (!_this._isMoved && e.target instanceof Element && !e.target.classList.contains('hystmodal__wrap')) return;
          _this._overlayChecker = true;
        });
        document.addEventListener('mouseup', function (e) {
          if (!_this._isMoved && e.target instanceof Element && _this._overlayChecker && e.target.classList.contains('hystmodal__wrap')) {
            e.preventDefault();
            _this._overlayChecker = !_this._overlayChecker;

            _this.close();

            return;
          }

          _this._overlayChecker = false;
        });
      }

      window.addEventListener('keydown', function (e) {
        if (!_this._isMoved && _this.config.closeOnEsc && e.which === 27 && _this.isOpened) {
          e.preventDefault();

          _this.close();

          return;
        }

        if (!_this._isMoved && _this.config.catchFocus && e.which === 9 && _this.isOpened) {
          _this.focusCatcher(e);
        }
      });
    }
  }, {
    key: "open",
    value: function open(selector) {
      if (selector) {
        if (typeof selector === 'string') {
          this._nextWindows = document.querySelector(selector);
        } else {
          this._nextWindows = selector;
        }
      }

      if (!this._nextWindows) {
        console.log('Warning: hystModal selector is not found');
        return;
      }

      if (this.isOpened) {
        this._reopenTrigger = true;
        this.close();
        return;
      }

      this.openedWindow = this._nextWindows;
      this._modalBlock = this.openedWindow.querySelector('.hystmodal__window');
      this.config.beforeOpen(this);

      this._bodyScrollControl();

      this.shadow.classList.add('hystmodal__shadow--show');
      this.openedWindow.classList.add('hystmodal--active');
      this.openedWindow.setAttribute('aria-hidden', 'false');
      if (this.config.catchFocus) this.focusControl();
      this.isOpened = true;
    }
  }, {
    key: "close",
    value: function close() {
      if (!this.isOpened) {
        return;
      }

      if (this.config.waitTransitions) {
        this.openedWindow.classList.add('hystmodal--moved');
        this._isMoved = true;
        this.openedWindow.addEventListener('transitionend', this._closeAfterTransition);
        this.openedWindow.classList.remove('hystmodal--active');
      } else {
        this.openedWindow.classList.remove('hystmodal--active');

        this._closeAfterTransition();
      }
    }
  }, {
    key: "_closeAfterTransition",
    value: function _closeAfterTransition() {
      this.openedWindow.classList.remove('hystmodal--moved');
      this.openedWindow.removeEventListener('transitionend', this._closeAfterTransition);
      this._isMoved = false;
      this.shadow.classList.remove('hystmodal__shadow--show');
      this.openedWindow.setAttribute('aria-hidden', 'true');
      if (this.config.catchFocus) this.focusControl();

      this._bodyScrollControl();

      this.isOpened = false;
      this.openedWindow.scrollTop = 0;
      this.config.afterClose(this);

      if (this._reopenTrigger) {
        this._reopenTrigger = false;
        this.open();
      }
    }
  }, {
    key: "focusControl",
    value: function focusControl() {
      var nodes = this.openedWindow.querySelectorAll(this._focusElements);

      if (this.isOpened && this.starter) {
        this.starter.focus();
      } else if (nodes.length) nodes[0].focus();
    }
  }, {
    key: "focusCatcher",
    value: function focusCatcher(e) {
      var nodes = this.openedWindow.querySelectorAll(this._focusElements);
      var nodesArray = Array.prototype.slice.call(nodes);

      if (!this.openedWindow.contains(document.activeElement)) {
        nodesArray[0].focus();
        e.preventDefault();
      } else {
        var focusedItemIndex = nodesArray.indexOf(document.activeElement);

        if (e.shiftKey && focusedItemIndex === 0) {
          nodesArray[nodesArray.length - 1].focus();
          e.preventDefault();
        }

        if (!e.shiftKey && focusedItemIndex === nodesArray.length - 1) {
          nodesArray[0].focus();
          e.preventDefault();
        }
      }
    }
  }, {
    key: "_bodyScrollControl",
    value: function _bodyScrollControl() {
      if (!this.config.backscroll) return; // collect fixed selectors to array

      var fixedSelectorsElems = document.querySelectorAll(this.config.fixedSelectors);
      var fixedSelectors = Array.prototype.slice.call(fixedSelectorsElems);
      var html = document.documentElement;

      if (this.isOpened === true) {
        html.classList.remove('hystmodal__opened');
        html.style.marginRight = '';
        fixedSelectors.forEach(function (el) {
          el.style.marginRight = '';
        });
        window.scrollTo(0, this._scrollPosition);
        html.style.top = '';
        return;
      }

      this._scrollPosition = window.pageYOffset;
      var marginSize = window.innerWidth - html.clientWidth;
      html.style.top = "".concat(-this._scrollPosition, "px");

      if (marginSize) {
        html.style.marginRight = "".concat(marginSize, "px");
        fixedSelectors.forEach(function (el) {
          el.style.marginRight = "".concat(parseInt(getComputedStyle(el).marginRight, 10) + marginSize, "px");
        });
      }

      html.classList.add('hystmodal__opened');
    }
  }]);

  return HystModal;
}();

exports.default = HystModal;

},{}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _hystmodal = _interopRequireDefault(require("hystmodal"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function init() {
  var modalsForms = new _hystmodal.default({
    linkAttributeName: "data-modal",
    catchFocus: true,
    waitTransitions: true,
    backscroll: false
  });
}

var _default = {
  init: init
};
exports.default = _default;

},{"hystmodal":1}],3:[function(require,module,exports){
"use strict";

var _modalsForm = _interopRequireDefault(require("../libs/modules/modals-form.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

document.addEventListener('DOMContentLoaded', function (e) {
  _modalsForm.default.init();
});

},{"../libs/modules/modals-form.js":2}]},{},[3]);
